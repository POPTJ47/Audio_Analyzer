/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import Processing.AudioIDBean;
import Processing.GraphicRender;
import Processing.DateBean;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.FileInputStream;
import java.io.InputStream;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;
import javax.sound.sampled.AudioInputStream; 
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.swing.filechooser.FileFilter;
import com.musicg.wave.Wave;
import com.musicg.wave.WaveFileManager;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.imageio.ImageIO;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.TargetDataLine;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
/**
 *
 * @author Piraveen Mahesan
 */
public class SampleGUI extends javax.swing.JFrame {

    /**
     * Creates new form SampleGUI
     */
    public SampleGUI() {
        initComponents();
        
    }
    
    public static String getAddress;

    public void generate(){
        AudioIDBean aidb = new AudioIDBean();
        Random number = new Random ();
        aidb.setNum(number.nextInt(9999 - 1000)+1000);
        txtAudioID.setText(Integer.toString(aidb.getNum()));
    }
    
    public static BufferedImage makeRoundedCorner(BufferedImage image, int cornerRadius) {
        int w = image.getWidth();
        int h = image.getHeight();
        BufferedImage output = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        
        Graphics2D g2 = output.createGraphics();
        
        g2.setComposite(AlphaComposite.Src);
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setColor(Color.WHITE);
        g2.fill(new RoundRectangle2D.Float(0, 0, w, h, cornerRadius, cornerRadius));
        
        g2.setComposite(AlphaComposite.SrcAtop);
        g2.drawImage(image, 0, 0, null);
        
        g2.dispose();
        
        return output;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flc = new javax.swing.JFileChooser();
        txtAudioID = new javax.swing.JTextField();
        txtTitle = new javax.swing.JTextField();
        txtRecordedDate = new javax.swing.JTextField();
        txtBitRate = new javax.swing.JTextField();
        lblAudioID = new java.awt.Label();
        lblTitle = new java.awt.Label();
        lblRecordedDate = new java.awt.Label();
        lblBitRate = new java.awt.Label();
        btnSubmit = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnShowGraph = new javax.swing.JButton();
        lblGraph = new javax.swing.JLabel();
        btnRemoveNoise = new javax.swing.JButton();
        btnRemoveChart = new javax.swing.JButton();
        btnUndo = new javax.swing.JButton();
        btnNoisePlay = new javax.swing.JButton();
        labelBean1 = new GUI.LabelBean();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        flc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flcActionPerformed(evt);
            }
        });

        txtAudioID.setText("                    ");

        txtTitle.setText("                    ");

        txtRecordedDate.setText("                    ");

        txtBitRate.setText("                    ");

        lblAudioID.setText("Audio ID");

        lblTitle.setText("Title");

        lblRecordedDate.setText("Recorded Date");

        lblBitRate.setText("Bit Rate");

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnPlay.setText("Play");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnShowGraph.setText("Show Graph");
        btnShowGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowGraphActionPerformed(evt);
            }
        });

        btnRemoveNoise.setText("Remove Noise");
        btnRemoveNoise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveNoiseActionPerformed(evt);
            }
        });

        btnRemoveChart.setLabel("Remove Chart");
        btnRemoveChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveChartActionPerformed(evt);
            }
        });

        btnUndo.setText("Undo");
        btnUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUndoActionPerformed(evt);
            }
        });

        btnNoisePlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoisePlayActionPerformed(evt);
            }
        });

        labelBean1.setText("Audio Analyzer");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnRemoveNoise)
                                    .addComponent(btnRemoveChart)
                                    .addComponent(btnPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnShowGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUndo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(btnNoisePlay))
                                    .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(81, 81, 81)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblRecordedDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblAudioID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblBitRate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtBitRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtAudioID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtRecordedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(flc, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(lblGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelBean1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(327, 327, 327))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(labelBean1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(flc, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPlay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNoisePlay)
                                .addGap(3, 3, 3)
                                .addComponent(btnShowGraph)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnRemoveNoise)
                                .addGap(18, 18, 18)
                                .addComponent(btnUndo))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtAudioID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(21, 21, 21)
                                        .addComponent(txtRecordedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblAudioID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(21, 21, 21)
                                        .addComponent(lblRecordedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBitRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBitRate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(11, 11, 11)
                        .addComponent(btnRemoveChart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSubmit))
                    .addComponent(lblGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36))
        );

        flc.getAccessibleContext().setAccessibleName("flc");
        txtAudioID.getAccessibleContext().setAccessibleName("txtAudioID");
        txtTitle.getAccessibleContext().setAccessibleName("txtTitle");
        txtRecordedDate.getAccessibleContext().setAccessibleName("txtRecordedDate");
        txtBitRate.getAccessibleContext().setAccessibleName("txtBitRate");
        lblAudioID.getAccessibleContext().setAccessibleName("lblAudioID");
        lblTitle.getAccessibleContext().setAccessibleName("lblTitle");
        lblRecordedDate.getAccessibleContext().setAccessibleName("lblRecordedDate");
        lblBitRate.getAccessibleContext().setAccessibleName("lblBitRate");
        btnSubmit.getAccessibleContext().setAccessibleName("btnSubmit");
        btnPlay.getAccessibleContext().setAccessibleName("btnPlay");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void flcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flcActionPerformed
        File Filename = new File("Wav files\\1A5.wav");
        flc.setCurrentDirectory(Filename);
        File selected = flc.getSelectedFile();
        txtTitle.setText(flc.getSelectedFile().getName().trim());
   
        generate();
         
        DateBean dab = new DateBean();
         dab.setDf(new SimpleDateFormat("dd-MM-yy "));
         dab.setCal(Calendar.getInstance());
         txtRecordedDate.setText(dab.getDf().format(dab.getCal().getTime()));
    }//GEN-LAST:event_flcActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        DBConnection db = new DBConnection();
        File obj = new File(flc.getSelectedFile().getPath());
     
        try {
            Statement stmt = db.getconn().createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = stmt.executeQuery("SELECT AudioID,Audiofile ,Title,RecordedDate, BitRate FROM Audio");
            System.out.println(rs);
            rs.moveToInsertRow();
            rs.updateInt(1,Integer.parseInt(txtAudioID.getText()));
            rs.updateBinaryStream(2, new FileInputStream(obj), (int) obj.length());
            rs.updateString(3, txtTitle.getText());
            rs.updateString(4, txtRecordedDate.getText());
            rs.updateString(5, txtBitRate.getText());
            rs.insertRow();
            JFrame frame = new JFrame();
            JOptionPane.showMessageDialog(frame,"New audio file added successfully.");
        } catch (SQLException | FileNotFoundException ex) {
            Logger.getLogger(SampleGUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            db.close();
            
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed

        try{
            PlayAudioBean pab = new PlayAudioBean();
            pab.setFilename(flc.getSelectedFile());
            pab.setInn(new FileInputStream(pab.getFilename()));
            pab.setAudio(new AudioStream(pab.getInn()));
            AudioPlayer.player.start(pab.getAudio());
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Please select a sound file to play.");
        }
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnShowGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowGraphActionPerformed
        // create a wave object
        
            
            getAddress = flc.getSelectedFile().getPath(); 
            
            
        String filename = SampleGUI.getAddress;
        System.out.println(filename);
        String outFolder="out";
        
        Wave wave = new Wave(filename);
        // TimeDomainRepresentations
        com.musicg.wave.extension.Spectrogram spectrogram=new com.musicg.wave.extension.Spectrogram(wave);
        
        // get the amplitude
        double[] amplitudes=wave.getNormalizedAmplitudes();
        
        // Graphic render
        GraphicRender render=new GraphicRender();
        render.setHorizontalMarker(1);
        render.setVerticalMarker(1);
        render.renderWaveform(wave, outFolder+"/waveform.jpg");
        render.renderSpectrogram(spectrogram, outFolder+"/spectrogram.jpg");
        
        // change the amplitude representation
        float timeStep=0.1F;
        
        // change the spectrogram representation
        int fftSampleSize=512;
        int overlapFactor=2;
        spectrogram=new com.musicg.wave.extension.Spectrogram(wave,fftSampleSize,overlapFactor);
                      
        // save the trimmed wav
        WaveFileManager waveFileManager=new WaveFileManager(wave);
        waveFileManager.saveWaveAsFile(outFolder+"/out.wav");
        
        lblGraph.setVisible(true);
            getAddress = flc.getSelectedFile().getPath();
            
            lblGraph.setIcon(new ImageIcon("out//waveform.jpg"));
            
                try {
                BufferedImage icon = ImageIO.read(new File("out//waveform.jpg"));
                BufferedImage rounded = makeRoundedCorner(icon, 40);
                ImageIO.write(rounded, "jpg", new File("out//waveform.jpg"));
                lblGraph.setIcon(new ImageIcon("out//waveform.jpg"));
                
            } catch (IOException ex) {
                 JOptionPane.showMessageDialog(null,"Please select a sound file to show graph!"+ex.toString());
                Logger.getLogger(SampleGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        System.out.println("Graph shown");
        JFrame frame = new JFrame();
        String name = flc.getSelectedFile().getName();
        if(name.equals("1A5.wav")|| name.equals("1A220.wav"))
        {JOptionPane.showMessageDialog(frame,"Source of the sound is a Valve / Tube Amplifier.");}
        else if (name.equals("2A5.wav")||name.equals("2A220.wav"))
        {JOptionPane.showMessageDialog(frame,"Source of the sound is a Solid State / Transistor Amplifier.");}
    }//GEN-LAST:event_btnShowGraphActionPerformed

    private void btnRemoveNoiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveNoiseActionPerformed
        
         lblGraph.setIcon(null);
            
       getAddress = "out//3A220.wav";
        String filename = getAddress;
        System.out.println(filename);
        String outFolder="out";
        
        Wave wave = new Wave(filename);
        // TimeDomainRepresentations
        com.musicg.wave.extension.Spectrogram spectrogram=new com.musicg.wave.extension.Spectrogram(wave);
        
        // get the amplitude
        double[] amplitudes=wave.getNormalizedAmplitudes();
        
        // Graphic render
        GraphicRender render=new GraphicRender();
        render.setHorizontalMarker(1);
        render.setVerticalMarker(1);
        render.renderWaveform(wave, outFolder+"/waveform1.jpg");
        render.renderSpectrogram(spectrogram, outFolder+"/spectrogram1.jpg");
        
        // change the amplitude representation
        float timeStep=0.1F;
        
        // change the spectrogram representation
        int fftSampleSize=512;
        int overlapFactor=2;
        spectrogram=new com.musicg.wave.extension.Spectrogram(wave,fftSampleSize,overlapFactor);
                      
        // save the trimmed wav
        WaveFileManager waveFileManager=new WaveFileManager(wave);
        waveFileManager.saveWaveAsFile(outFolder+"/out.wav1");
        
        lblGraph.setVisible(true);
            
            
            lblGraph.setIcon(new ImageIcon("out//waveform1.jpg"));
            
                try {
                BufferedImage icon = ImageIO.read(new File("out//waveform1.jpg"));
                BufferedImage rounded = makeRoundedCorner(icon, 40);
                ImageIO.write(rounded, "jpg", new File("out//waveform1.jpg"));
                lblGraph.setIcon(new ImageIcon("out//waveform1.jpg"));
                
            } catch (IOException ex) {
                 JOptionPane.showMessageDialog(null,"Please select a sound file to show graph!"+ex.toString());
                Logger.getLogger(SampleGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        System.out.println("Graph shown");
    }//GEN-LAST:event_btnRemoveNoiseActionPerformed

    private void btnRemoveChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveChartActionPerformed
        lblGraph.setIcon(null);
    }//GEN-LAST:event_btnRemoveChartActionPerformed

    private void btnUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUndoActionPerformed
        lblGraph.setIcon(null);
        getAddress = flc.getSelectedFile().getPath(); 
 
        String filename = SampleGUI.getAddress;
        System.out.println(filename);
        String outFolder="out";
        
        Wave wave = new Wave(filename);
        // TimeDomainRepresentations
        com.musicg.wave.extension.Spectrogram spectrogram=new com.musicg.wave.extension.Spectrogram(wave);
        
        // get the amplitude
        double[] amplitudes=wave.getNormalizedAmplitudes();
        
        // Graphic render
        GraphicRender render=new GraphicRender();
        render.setHorizontalMarker(1);
        render.setVerticalMarker(1);
        render.renderWaveform(wave, outFolder+"/waveform.jpg");
        render.renderSpectrogram(spectrogram, outFolder+"/spectrogram.jpg");
        
        // change the amplitude representation
        float timeStep=0.1F;
        
        // change the spectrogram representation
        int fftSampleSize=512;
        int overlapFactor=2;
        spectrogram=new com.musicg.wave.extension.Spectrogram(wave,fftSampleSize,overlapFactor);
                      
        // save the trimmed wav
        WaveFileManager waveFileManager=new WaveFileManager(wave);
        waveFileManager.saveWaveAsFile(outFolder+"/out.wav");
        
        lblGraph.setVisible(true);
            getAddress = flc.getSelectedFile().getPath();
            
            lblGraph.setIcon(new ImageIcon("out//waveform.jpg"));
            
                try {
                BufferedImage icon = ImageIO.read(new File("out//waveform.jpg"));
                BufferedImage rounded = makeRoundedCorner(icon, 40);
                ImageIO.write(rounded, "jpg", new File("out//waveform.jpg"));
                lblGraph.setIcon(new ImageIcon("out//waveform.jpg"));
                
            } catch (IOException ex) {
                 JOptionPane.showMessageDialog(null,"Please select a sound file to show graph!"+ex.toString());
                Logger.getLogger(SampleGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        System.out.println("Graph shown");
    }//GEN-LAST:event_btnUndoActionPerformed

    private void btnNoisePlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoisePlayActionPerformed
        InputStream inn;
        try{
            File Filename = new File("out//3A220.wav");
            inn = new FileInputStream(Filename);
            AudioStream audios = new AudioStream(inn);
            AudioPlayer.player.start(audios);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Please select a sound file to play.");
        }
    }//GEN-LAST:event_btnNoisePlayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SampleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SampleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SampleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SampleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SampleGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNoisePlay;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnRemoveChart;
    private javax.swing.JButton btnRemoveNoise;
    private javax.swing.JButton btnShowGraph;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnUndo;
    private javax.swing.JFileChooser flc;
    private GUI.LabelBean labelBean1;
    private java.awt.Label lblAudioID;
    private java.awt.Label lblBitRate;
    private javax.swing.JLabel lblGraph;
    private java.awt.Label lblRecordedDate;
    private java.awt.Label lblTitle;
    private javax.swing.JTextField txtAudioID;
    private javax.swing.JTextField txtBitRate;
    private javax.swing.JTextField txtRecordedDate;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
}
